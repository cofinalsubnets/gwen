(: prelude '(,
    (: (Q x) (X '` (X x 0))
       (AA x) (A (A x)) (AB x) (A (B x))
       (BA x) (B (A x)) (BB x) (B (B x)))
    (: (foldl f z l) (? l (foldl f (f z (A l)) (B l)) z)
       (foldr f z l) (? l (f (A l) (foldr f z (B l))) z))
    (: (id x) x
       (const x y) x
       (flip f x y) (f y x)
       (map f l) (? l (X (f (A l)) (map f (B l))))
       (filter f l) (? l (: m (filter f (B l)) (? (f (A l)) (X (A l) m) m)))
       (init l) (? (B l) (X (A l) (init (B l))))
       (last l) (? (B l) (last (B l)) (A l))
       (llen l) (? (X? l) (+ 1 (llen (B l))))
       (diag f x) (f x x)
       (each f l) (? (X? l) (, (f (A l)) (each f (B l))))
       (all f l) (? l (? (f (A l)) (all f (B l))) -1)
       (any f l) (? l (? (f (A l)) -1 (any f (B l))))
       (append a b) (? a (X (A a) (append (B a) b)) b)
       (partition p) (foldr (\ a m
        (? (p a) (X (X a (A m)) (B m))
                 (X (A m) (X a (B m))))) '(()))
       inc (+ 1)
       dec (+ -1)
       (iota n) (: (k m) (? (< m n) (X m (k (inc m)))) (k 0))
       reverse (foldl (flip X) 0)
       (puts s) (: (f n l) (? (= n l) s (, (putc (sget s n)) (f (+ n 1) l))) (f 0 (slen s))))

    (:: 'L (foldr (\ a l (X X (X a (X l 0)))) 0))
    ; end of prelude definitions

    )
 (,
  (ev prelude)
  ;  end of prelude
 ))
