#!lips -vr
;; here's some data constructors
(: li (\ . . .) ; dot only has special meaning following another argument, which can be dot
   ++ (\ a b(?(twop a)(::(*: a)(++(:* a)b))b)) ; append
   iota (\ n x .
    (: iota.l (\ m n (? (< m n) (:: m (iota.l (+ m 1) n))))
     (? (nilp x) (iota.l 0 n) (iota.l n (*: x)))))
   rho (\ n xs .
    (: rho.l(\ n x(?(= n 1)x(++ x(rho.l(- n 1)x))))
     (?(> n 0)(rho.l n xs)))))

(: map (\ f x (? (twop x) (:: (f (*: x)) (map f (:* x)))))
   foldl(\ z f x (? (twop x) (foldl (f z (*: x)) f (:* x)) z))
   foldr (\ z f x (? (twop x) (f (*: x) (foldr z f (:* x))) z))
   foldl1 (\ f x (foldl (*: x) f (:* x)))
   foldr1  (\ f x (? (twop (:* x)) (f (*: x) (foldr1 f (:* x)))
                                   (*: x)))
   id (\ x x)
   each (\ x f (? x (,(f (*: x)) (each (:* x) f))))

   at (\ l n (? (< n 1) (*: l) (at (:* l) (- n 1))))
   atn (\ n (\ l (at l n)))
   flip (\ f (\ x y (f y x)))
   snoc  (\ l x (? (twop l) (:: (*: l) (snoc (:* l) x))
                            (:: x l)))
   rev (\ l (,
    (: rev.i (\ l m (? l (rev.i (:* l) (:: (*: l) m)) m)))
    (rev.i l ())))
   ldel (\ l k (? l
    ((? (= k (*: l)) id (\ m (:: (*: l) m)))
     (ldel (:* l) k))))
   elem (\ l x (< -1 (idx l x)))
   ldiff (\ l m (?
    (nilp m) l
    (ldiff (ldel l (*: m)) (:* m))))
   idx (\ l x
    ((: .l (\ l x n (? (twop l) (? (= x (*: l)) n (.l (:* l) x (+ n 1))) -1)))
     l x 0))
   len (\ l (? (twop l) (+ 1 (len (:* l))) 0)))


(tbl-set macros
 ; a macro for defining macros
 '::: (: defm (\ n x . (,(tbl-set macros n (: v (ev (*: x))))
                         (? (:* x) (ap defm (:* x)) v))))
 ; bind
 '>>= (\ x f (li f x)))
; ok now let's bootstrap a lisp compiler!
; we can do this by redefining ev at toplevel.
(tbl-set ns 'ev ((\ q ((ev q) q)) '(:
 env (\ a p n (>>=
  ((: asig (\ a n
       (? (twop a)
        (? (? (twop (:* a)) (= '. (*: (:* a))))
         (:: (- (+ n 1)) (li (*: a)))
         (>>= (asig (:* a) (+ n 1)) (\ r
          (:: (*: r) (:: (*: a) (:* r))))))
        (:: n a)))) a 0) (\ b
  (tbl 'arg (:* b) 'loc ()
       'clo ()     'par p
       'lam (tbl)  'nom n
       'val (tbl)  'sig (*: b)))))
 tset tbl-set tget tbl-get
 inst (\ e m i k (emi i (k e (+ m 1))))
 inom (\ i (>>= (tbl-keys ns) (: in (\ l (? l
  (? (= i (tbl-get ns (*: l))) (*: l) (in (:* l))))))))
 emh (\ h (: i (hom-get-i h)
  (? (= i 0) () (>>= (inom i) (\ x
   (? x (? (|| (= i i-pc0) (= i i-pc1) (= i i-clos))
            (:: (inom i) (emh (hom-get-x (hom-seek h 2))))
           (:: (inom i) (emh (hom-seek h 1))))
    (emh (hom-seek h 1))))))))

 insx (\ e m i x k (emi i (emx x (k e (+ m 2)))))
 imm  (\ e m x k (insx e m i-immv x (\ e m (produce e m (t-tag x) k x))))
 cev  (\ e m x k ((? (twop x) c2 (symp x) cy imm) e m x k))

 cy (\ e m x k (:
  addclo (\ e y (tset e'clo(snoc (tget e 'clo) y)))
  late (\ e m x d k (>>= (k e (+ m 2)) (\ h
   (>>= (consumes h) (\ t
    (>>= (? (= t t-none) h (hom-seek h 1)) (\ h
     (emi i-lbind (emx (:: t (:: d x)) h)))))))))
  r (look e x)
  s (*: r)
  (? (= s 'here)  (imm e m (:* r) k)
     (= s 'wait)  (late e m x (:* r) k)
     (= e (:* r)) (? (= s 'arg)
                      (insx e m i-argn (idx (tget e 'arg) x) k)
                     (= s 'loc)
                      (insx e m i-locn (idx (tget e'loc) x) k)
                     (= s 'clo)
                      (insx e m i-clon (idx (tget e'clo) x) k))
     (: l (len (tget e'clo)) (, (addclo e x)
                             (insx e m i-clon l k))))))

 cqt (\ e m x k (: y (:* x) (imm e m (? y (*: y)) k)))
 toplp (\ e (nilp (tget e'par)))
 look (\ e y
   (? (tbl-has (tget e 'val) y) (:: 'here (tget (tget e 'val) y))
      (< -1 (idx (tget e 'lam) y)) (:: 'wait (tget e 'val))
      (< -1 (idx (tget e 'loc) y)) (:: 'loc e)
      (< -1 (idx (tget e 'arg) y)) (:: 'arg e)
      (< -1 (idx (tget e 'clo) y)) (:: 'clo e)
      (tget e 'par) (look (tget e 'par) y)
      (tbl-has ns y) (:: 'here (tget ns y))
      (:: 'wait ns)))
 init (\ l (? (twop (:* l)) (:: (*: l) (init (:* l)))))
 last (\ l (? (twop (:* l)) (last (:* l)) (*: l)))
 t-hom 0 t-num 1 t-two 2 t-tup 3 t-oct 4
 t-tbl 5 t-sym 6 t-nil 7 t-none 8
 consumes (\ h (: i (hom-get-i h) (?
  (= i i-tchom) t-hom
  (= i i-tcnum) t-num
  (= i i-tctwo) t-two
  t-none)))

 cap (\ e m x k
  ((: capi (\ e m x k
       (? (nilp x) (k e m)
        (capi e m (:* x) (\ e m
         (cev e m (*: x) (\ e m
          (inst e m i-push k))))))))
   e m (:* x) (\ e m
    (cev e m (*: x) (\ e m
     (inst e m i-tchom (\ e m (>>= (k e (+ m 2)) (\ k
      (: l (len (:* x)) (?
       (= i-ret (hom-get-i k))
        ((\ k (? (= l (len (tget e 'arg))) (emi i-loop k)
                      (emi i-rec (emx l k))))
         (hom-seek k 1))
       (emi i-call (emx l k)))))))))))))

 cse (\ e m x k (? (:* x)
  ((: cser (\ e m x k (?
      (nilp x) (k e m)
               (cev e m (*: x) (\ e m
                (cser e m (:* x) k))))))
   e m (:* x) k)
  (imm e m () k)))

 mat (\ e x (: y (look e x) (? (= (*: y) 'here) (li (:* y)))))
 cde (\ e m x k
  (: desug (\ d (li (li '\ (li ', (init d) (last d)))))
     cder (\ e m x k (? (nilp x) (k e m) (?
      (>>= (\ e m (cder e m (:* (:* x)) k)) (\ k
       (? (|| (toplp e) (< -1 (idx (tget e 'loc) (*: x))))
           (cev e m (*: (:* x)) (\ e m (cdeb e m (*: x) k)))
          (: q (mat e (*: x)))
           (imm e m (*: q) k)
           (cev e m (*: x) k)))))))
     cdeb (\ e m x k (?
      (toplp e) (insx e m i-tbind x k)
                (insx e m i-setl (idx (tget e 'loc) x) k)))
   (? (nilp (:* x)) (imm e m () k)
      (= 1 (% (len (:* x)) 2)) (cev e m (desug x) k)
      (cder e m (:* x) k))))

 cco (\ e m x k
  (: ccopreant (\ e m k (>>= (k e (+ m 2)) (\ k
      (>>= (emi i-branch (emx (*: (tget e 's1)) k)) (\ k
       (, (tset e 's1 (:* (tget e 's1))) k))))))
     ccopre (\ e m k (>>= (k e m) (\ k
      (*: (tset e 's2 (:: k (tget e 's2)))))))
     ccoprecon (\ e m k (>>= (k e (+ m 2)) (\ x
      (>>= (*: (tget e 's2)) (\ k
       (: i (hom-get-i k)
        (? (= i i-ret) (emi i x)
         (emi i-jump
          (emx (? (= i i-jump) (hom-get-x (hom-seek k 1)) k) x)))))))))
     ccopostcon (\ e m k (>>= (k e m) (\ k
      (*: (tset e 's1 (:: k (tget e 's1)))))))
     ; unlike in the bootstrap compiler, here we can
     ; assume there are an odd number of arguments, ie.
     ; at least 1. this is assured by peco. thanks peco!
     ccor (\ e m x k (?
      (nilp (:* x)) (cev e m (*: x) (\ e m (ccoprecon e m k)))
      (cev e m (*: x) (\ e m
       (ccopreant e m (\ e m
        (ccor e m (:* (:* x)) (\ e m
         (ccopostcon e m (\ e m
          (cev e m (*: (:* x)) (\ e m
           (ccoprecon e m k)))))))))))))
   (? (nilp (:* x)) (imm e m nil k)
    ((\ k (, (tset e 's2 (:* (tget e 's2))) k))
     (ccor e m (:* x) (\ e m (ccopre e m k)))))))


 quote (\ x (? (qtd x) x (li '` x)))
 pey (\ e x (: l (look e x)
  (? (= (*: l) 'here) (quote (:* l)) x)))
 pede (\ e x
  (: peder (\ e x (? x
      (:: (*: x) (:: (pev e (*: (:* x))) (peder e (:* (:* x)))))))
   (:: ': (? (|| (nilp x) (= 1 (% (len x) 2))) x (peder e x)))))
 pesq (\ e x (,
  (: pesqr (\ e x (?
   (nilp (:* x)) (li (pev e (*: x)))
   (: y (pev e (*: x))
      z (pesqr e (:* x))
    (? (|| (symp y) (qtd y)) z (:: y z))))))
  (: y (:* x) (? y
   (: z (pesqr e y) (? (:* z) (:: ', z) (*: z)))))))
 pe2 (\ e x (: a (*: x) (?
  (|| (= a '`) (= a '\)) x
  (= a ':) (pede e (:* x))
  (= a '?) (peco e (:* x))
  (= a ',) (pesq e x)
  (tbl-has macros a)
   (pev e (ap (tbl-get macros a) (:* x)))
  (map (\ x (pev e x)) x))))

 pcomm (\ e f m x (?
  (nilp x) (li m)
  (: y (pev e (*: x))
   (? (nump y) (pcomm e f (f m y) (:* x))
    (: z (pcomm e f m (:* x))
     (, (!* z (:: y (:* z))) z))))))

 pap (\ e f x
  (? ;(= f +) (padd e x)
   (:: f (map (\ x (pev e x)) x))))
 sdepsd (\ x (:
  evens (\ x (? x (odds (:* x))))
  odds (\ x (? x (:: (*: x) (evens (:* x)))))
  noms (odds x)
  defs (foldr1 ++ (map sdeps (evens x)))
  (ldiff defs noms)))
 sdeps (\ x (?
  (symp x) (? (= -1 (idx '(: \ ` , ?) x)) (li x))
  (twop x) (: z (*: x) (?
   (= z '`) ()
   (= z ':) (sdepsd (:* x))
   (= z '\) (fail 'NO)
   (++ (sdeps (*: x)) (sdeps (:* x)))))))

 qtd (\ x (? (twop x) (= (*: x) '`) (nilp (symp x))))
 unq (\ x (? (twop x) (*: (:* x)) x))
 peco (\ e x
  (: pecor (\ e x (?
      (nilp x) (li ())
      (nilp (:* x)) (li (pev e (*: x)))
      (: a (pev e (*: x))
       (? (qtd a) (? (unq a) (li (pev e (*: (:* x))))
                             (pecor e (:* (:* x))))
        (:: a (:: (pev e (*: (:* x))) (pecor e (:* (:* x)))))))))
   (: r (pecor e x) (? r (? (nilp (:* r)) (*: r) (:: '? r))))))

 pev (\ e x (?
  (twop x) (pe2 e x)
  (symp x) (pey e x)
  (quote x)))

 ltu (\ e nom l
  (: n ((\ x (? x x (:: x x))) (:* l))
     x (last n)
     f (env (init n) e (:: nom (tget e 'nom)))
   (, (scan f x)
      (resolve f)
      (>>= (cev f 4 (pev f x) ini) (\ k
       (>>= (? (nilp (tget f 'loc)) k
              (emi i-prel (emx (len (tget f 'loc)) k))) (\ k
        (>>= (hom-fin (?
             (> (: i (tget f 'sig)) 0) (emi i-arity (emx i k))
             (< i 0) (emi i-vararg (emx (- (- i) 1) k))
             k)) (\ k
         (? (tget f 'clo) (:: (tget f 'clo) k) k))))))))))

 resolve (\ e
  (: precomps (\ e ks (? ks
      (: k (*: ks) i (ltu e k (tget (tget e 'lam) k)) (,
       (? (homp i) (, (tset (tget e 'val) k i)
                      (tbl-del (tget e 'lam) k)
                      (tset e'loc(ldel (tget e 'loc) k)))
                   (, (!* i (tbl-get (tget e 'lam) k))
                      (tbl-set (tget e 'lam) k i)))
       (precomps e (:* ks))))))

     okvs (\ e vs (?
      (nilp vs) 0
      (: v (*: vs)
       (? (|| (tbl-has (tget e 'lam) v) (tbl-has (tget e'val) v))
          (okvs e (:* vs))))))

     elim (\ e ks (? ks (>>= (*: ks) (\ k (?
      (nilp (okvs e (*: (tbl-get (tget e 'lam) k))))
       (, (tbl-del (tget e'lam) k) (elim e (tbl-keys (tget e'lam))))
      (elim e (:* ks)))))))

     recomps (\ e d ks (? ks (: k (*: ks) (,
      (tset e 'loc (ldel (tget e 'loc) k))
      (tset (tget e 'val) k (ltu e k (:* (tget d k))))
      (recomps e d (:* ks))))))

   (, (precomps e (tbl-keys (tget e 'lam)))
      (elim e (tbl-keys (tget e'lam)))
      (: ls (tget e 'lam) (recomps e ls (tset e 'lam (tbl-keys ls)))))))

 scan (\ e x
  (: scandef (\ e x (?
      (nilp x) 0
      (:* x) ((\ r (, (? r (scandefadd e (*: x) (*: (:* x)))) r))
              (scandef e (:* (:* x))))))
     mcar (\ x (? x (*: x)))
     addloc (\ e y (tset e 'loc (:: y (tget e 'loc))))

     scandefadd (\ e y x (,
      (? (symp x) (addloc e y)
         (twop x) (>>= (*: x) (\ z (?
          (= z '`) (tbl-set (tget e'val) y (mcar (:* x)))
          (= z '\) (, (tbl-set (tget e'lam) y x) (addloc e y))
          (addloc e y))))
         (tbl-set (tget e'val) y x))
      (scan e x)))

   (? (twop x) (: y (*: x) (?
    (= y '\) ()
    (= y '`) ()
    (= y ':) (scandef e (:* x))
    (each x (\ x (scan e x))))))))

 t-tag (\ x (?
  (homp x) t-hom (nump x) t-num
  (twop x) t-two ;(tupp x) t-tup
  (symp x) t-sym (strp x) t-oct
  (tblp x) t-tbl (nilp x) t-nil))
 t-nom (\ t (?
  (= t t-hom) 'hom (= t t-num) 'num
  (= t t-two) 'two (= t t-tup) 'tup
  (= t t-oct) 'str (= t t-tbl) 'tbl
  (= t t-sym) 'sym (= t t-nil) 'nil))
 type-err (\ e h w x (fail (li
  'type 'error: x ': (t-nom h) 'for (t-nom w)
  'in (ini e 0))))
 arity-err (\ e h w (fail (li
  'arity-error ': h 'of w
  ' in (ini e 0))))

 ; this function has a lot of arguments sorry...
 ; env, len, type, cont, xpn.
 produce (\ e m t k x (:
  tc (\ t h
   ((\ u (? (= u t) (tc t (hom-seek h 1))
            (= u t-none) h
            (, (type-err e t u x) h)))
    (consumes h)))
  (tc t (k e m))))

 cla (\ e m x k
  (: gnom (\ e k (: i (hom-get-i k)
      (? (= i i-tbind) (hom-get-x (hom-seek k 1))
         (= i i-setl)  (at (tget e'loc) (hom-get-x (hom-seek k 1))))))

     claclo (\ e arg
      (: clacloin (\ e arg k (? (nilp arg) k
          (clacloin e (:* arg) (\ e m
           (cev e m (*: arg) (\ e m
            (inst e m i-push k)))))))
         k (\ e m (emi i-take (emx (len arg) (hom (+ m 2)))))
       ((clacloin e arg k) e 0)))

   (>>= (produce e (+ m 2) t-hom k x) (\ k
    (>>= (ltu e (gnom e k) x) (\ x (?
     (homp x) (emi i-immv (emx x k))
     (emi (? (tget e'loc) i-encll i-encln)
      (emx (:: (:* x) (claclo e (*: x))) k)))))))))

 c2 (: forms (tbl '` cqt '? cco ': cde '\ cla ', cse)
     (\ e m x k (: z (tbl-get forms (*: x))
                 ((? z z cap) e m x k))))
 ini (\ e m (insx e m i-ret (tget e'nom) (\ e m (hom m))))
 eval (\ x (: e (env () () ()) ((cev e 0 (pev e x) ini))))
 eval ; comment this line to have compiler internals defined at toplevel
 )))
