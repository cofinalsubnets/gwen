(::: wait (\ x (: a (sym) b (sym) c (sym)
 (L \ a (L \ b c (L c (L x a)))))))
(:
 (walk u s) (?
  (var? u) (? (: t (has-s s u)) (walk (A t) s) u)
  (2? u) (X (walk (A u) s) (walk (B u) s))
  u)


 ((SX x s) n m y) (y x s)
 (S0 n) (n)
 (S1 x) (SX x S0)
 (S-take z f n s) (? (= n 0) z (s
  (\ z)
  (\ s (S-take z f n s))
  (\ x s (f x (S-take z f (? (nump n) (- n 1)) s)))))

 (S+ s t)
  (s (\ t)
     (\ s (\ _ m (m (S+ t s))))
     (\ x s (SX x (S+ s t))))

 (S* s g)
  (s (\ s)
     (\ s (\ _ m (m (S* s g))))
     (\ x s (S+ (g x) (S* s g))))

 ((et  a b) s) (S* (a s) b)
 ((vel a b) s) (S+ (a s) (b s))

 ((est u v) s)
  (: x (walk u s) y (walk v s) (?
   (= x y)  (S1 s)
   (var? x) (S1 (ext-s s x y))
   (var? y) (S1 (ext-s s y x))
   (&& (2? x) (2? y))
    ((et (est (A x) (A y)) (est (B x) (B y))) s)
   S0))

; ((S$ f s) g n) (s (\ x s (g (f x) (S$ f s))) n)
 (Run n ks g) (map (rei ks) (S-take () X n (g ~~)))
 ((rei ks) st)
  (flat-map ks (\ k
   (? (: it (has-s (X (map A (A st)) (B st)) k))
    (L k (walk (A it) st)))))
   )

(: (add a b c) (,
;(.'add a b c)
(vel (et (est a ()) (est b c))
                (wait (\\ x (et (est (L x) a)
                                (add x (L b) c)))))))
;(: never (vel (\ S0) (delay never))
;(Run n vs q) (S-take X n (S$ (rei vs) (q ~~))))

(test k1
 (unord-eq '((a (1 2 (3 (4))) b (3 (4)) c 4)) (Run () '(a b c) (\\ a b c (et (est a (L 1 2 b)) (et (est b (L 3 (L c))) (est c 4))))))
 (= (rho 9 '(a 9)) (Run 9 '(a) (\\ a (: nines (vel (est a 9) (wait nines))))))
 (unord-eq (map (\ i (L 'a i)) (iota 10)) (Run 10 '(a) (\\ a (: (at-least n) (vel (est a n) (wait (at-least (+ n 1)))) (vel (\ S0) (vel (est a 0) (at-least 1)))))))
 (unord-eq '((a 7 b 6) (a 7 b 5)) (Run () '(a b) (\\ a b (et (est a 7) (vel (est b 5) (est b 6))))))
 (unord-eq '((a 9 b 8)) (Run () '(a b) (\\ a b (et (est a 9) (est b 8)))))
 (unord-eq '((a 1 b 1)) (Run () '(a b) (\\ a b (et (est a 1) (est a b)))))
 (unord-eq '((a 7 b 3)) (Run () '(a b) (\\ a b (et (est a 7) (et (est b 3) (vel (est b 3) (est b 4)))))))
 (unord-eq '((a (1 2) b 2)) (Run () '(a b) (\\ a b (et (est a (L 1 b)) (est b 2)))))
 (~ (Run () '(a) (\\ a (et (est a 0) (est a 1)))))
 (~ (Run () '(a b) (\\ a b (et (est a 7) (et (est b 3) (vel (est b 2) (est b 4)))))))
 (unord-eq '((a 1 b 2 c 2) (b 9 c 7) (c 88)) (Run () '(a b c) (\\ a b c (vel (et (est a 1) (et (est b 2) (est c b))) (vel (et (est c 7) (est b 9)) (est c 88))))))
 (unord-eq '((a 7 b 8 c 9) (a 4 b 5 c 6) (a 1 b 2 c 3)) (Run () '(a b c) (\\ a b c (vel (et (est a 1) (et (est b 2) (est c 3))) (vel (et (est a 4) (et (est b 5) (est c 6))) (et (est a 7) (et (est b 8) (est c 9))))))))
 (unord-eq (map (\ i (L 'a i)) (iota 10))
  (Run 10 '(a) (\\ a
   (: never (vel (\ S0) (wait never))
      (at-least n) (vel (est a n) (wait (at-least (+ n 1))))
    (vel never (vel (est a 0) (at-least 1)))))))
 (: inc L
    (iter n f x) (? (= 0 n) x (iter (- n 1) f (f x)))
    zero () one '(()) two '((()))
    (add a b c) (vel (et (est a ()) (est b c)) (\\ x
                 (et (est (inc x) a) (wait
                  (add x (inc b) c)))))
    (fibo a b) (vel (et (est a one) (est b one))
                (vel (et (est a two) (est b one)) (\\ x y p q
                 (et (est (inc x) a)
                  (et (est (inc y) x) (wait
                   (et (fibo x p)
                    (et (fibo y q)
                     (add p q b)))))))))
    (= (L (L 'a (iter 144 L ())))
     (\ (Run () '(a) (\\ a (fibo (iter 12 L ()) a))))))
 )
