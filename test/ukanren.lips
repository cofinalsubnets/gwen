(: (y? x) (&& (symp x) (~ (ystr x))) ; anonymous symbol ?
   ((m& f g) x) (m* (f x) g)     ; conj
   ((m| f g) x) (m+ (f x) (g x)) ; disj
   (m* a b) (? (~ a) () (homp a) (\ (m* (a) b)) ; bind
                                 (m+ (b (A a)) (m* (B a) b)))
   (m+ a b) (? (~ a)  b (homp a) (\ (m+ b (a))) ; mplus
                                 (X (A a) (m+ (B a) b)))
   m= (: (w u s) (|| (&& (y? u) ; walk
                         (: r (find s (co A (cu = u))))
                         (w (B r) s))
                     u)
         ((uni u v) s) (: x (w u s) y (w v s) (? ; unify
          (= x y) s             ; ok
          (y? x) (X (X x y) s)  ; x <- y
          (y? y) (X (X y x) s)  ; y <- x
          (&& (twop x) (twop y) ; list
           (uni (B x) (B y) (uni (A x) (A y) s)))))
       (co uni (\ f (co f L)))))
(::: m\ (\ a . (X (X '\ a) (map (init a) (\ (L sym))))))

(: a7b5|6 (m& (m\ a (m= a 7)) (m\ b (m| (m= b 5) (m= b 6))))
   (tabulate results) (foldl results () (\ m rset
    (X (foldl  rset () (\ m bind (X (B bind) m))) m)))
 (test kanren
  (= '((7 6) (7 5)) (tabulate (a7b5|6 ())))))
