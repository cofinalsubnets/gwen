 (:::
  case* (\ a* z a f af (: y (sym) (L : y a* (L ?
   (L \? y) (L f y)
   (L '&& (L 2? y) (L \? (L B y))) (L af (L A y) (L B y))
   y (L a y)
   z))))
  \\ (\ a . (X (X '\ a) (map (\ a (L var (Q a))) (init a))))
  Zzz (\ x (: y (sym) (L \ y  (L \ (L x y)))))
  &? (\ a x . (: b (L 'Zzz a) (? x (L conj b (X '&? x)) b)))
  |? (\ a x . (: b (L 'Zzz a) (? x (L disj b (X '|? x)) b))))
(:
 (k2 s z f) (?
  (\? s) (f s)
  (2? s) (X (A s) (f (B s)))
  z)
 (dict-has d k) (:
  (loop k ks vs) (? ks
   (? (= k (A ks)) vs (loop k (B ks) (B vs))))
  (loop k (A d) (B d)))
 (dict-get d k) (? (: x (dict-has d k)) (A x))
 (dict-set d k v) (X (X k (A d)) (X v (B d)))

 empty-stream ()
 ((stream-of x) f) (f x ())
 ((stream-cons x s) f) (f x s)
 (stream-case s z f) (? s (s f) z)
 (stream-take f n s)
  (? (|| (= n 0) (~ s)) s
   (s (\ a s (f a (stream-take f (? (nump n) (- n 1)) s)))))

  has-s dict-has
  ref-s dict-get
  ext-s dict-set
  st-empty ~~
  pure I
  (bind x f) (f x)

 var vec
 var? vecp
 (walk u s) (||
  (&& (var? u) (: t (has-s s u)) (walk (A t) s))
  (&& (2? u) (X (walk (A u) s) (walk (B u) s)))
  u)
 ((disj f g) s) (m+ (f s) (g s))
 ((conj f g) s) (m* (f s) g)

 (n+ s t) (k2 s t (\ f (\ (n+ (t) f))))
 (n* s g) (k2 s s (\ f (\ (n* (f) g))))

 (m+ s0 s1) (case* s0
  s1
  (\ a (X a s1))
  (\ f (\ (m+ (s1) f)))
  (\ a f (X a (\ (m+ (s1) f)))))
  
 (m* s g) (case* s
  ()
  g
  (\ f (\ (m* (f) g)))
  (\ a f (m+ (g a) (\ (m* (f) g)))))

 ((== u v) s)
  (: x (walk u s) y (walk v s) (?
   (= x y) (pure s)
   (var? x) (pure (ext-s s x y))
   (var? y) (pure (ext-s s y x))
   (&& (2? x) (2? y)
    (bind ((== (A x) (A y)) s)
          (== (B x) (B y))))))

 (run n g) (take n (g st-empty))
 (take n s) (? (= n 0) () (case* s ()
  (\ a (L a))
  (\ f (take n (f)))
  (\ a f (X a (take (? (nump n) (- n 1)) f)))))

 (unord-eq a b) (&&
  (= (len a) (len b))
  (all (cu memq a) b))

 (re ks sts) (:
  (rei ks st)
   (flat-map ks (\ k
    (? (: it (has-s (X (map (\ y (vget y 0)) (A st)) (B st)) k))
     (L k (walk (A it) st)))))
  (map (cu rei ks) sts)))

(test k4
 (unord-eq '((a (1 2 (3 (4))) b (3 (4)) c 4))
    (re '(a b c) (run () (\\ a b c (&? (== a (L 1 2 b)) (== b (L 3 (L c))) (== c 4))))))
 (= (rho 33 '(a 9))
  (re '(a) (run 33 (\\ a (: (nines) (|? (== a 9) (nines)) (nines))))))
 (unord-eq (map (\ i (L 'a i)) (iota 10))
  (re '(a) (run 10 (\\ a
   (: (never s) ((|? (\) never) s)
      (at-least n) (|? (== a n) (at-least (+ n 1)))
    (|? never (== a 0) (at-least 1)))))))
 (unord-eq '((a 7 b 6) (a 7 b 5)) (re '(a b) (run () (\\ a b (&? (== a 7) (|? (== b 5) (== b 6)))))))
 (unord-eq '((a 9 b 8)) (re '(a b) (run () (\\ a b (&? (== a 9) (== b 8))))))
 (unord-eq '((a 1 b 1)) (re '(a b) (run () (\\ a b (&? (== a 1) (== a b))))))
 (unord-eq '((a 7 b 3)) (re '(a b) (run () (\\ a b (&? (== a 7) (== b 3) (|? (== b 3) (== b 4)))))))
 (unord-eq '((a (1 2) b 2)) (re '(a b) (run () (\\ a b (&? (== a (L 1 b)) (== b 2))))))
 (~ (run () (\\ a (&? (== a 0) (== a 1)))))
 (~ (run () (\\ a b (&? (== a 7) (== b 3) (|? (== b 2) (== b 4))))))
 (unord-eq '((a 1 b 2 c 2) (b 9 c 7) (c 88)) (re '(a b c) (run ()
    (\\ a b c (|? (&? (== a 1) (== b 2) (== c b))
                  (&? (== c 7) (== b 9))
                  (== c 88))))))
 (unord-eq '((a 7 b 8 c 9) (a 4 b 5 c 6) (a 1 b 2 c 3)) (re '(a b c) (run ()
    (\\ a b c (|? (&? (== a 1) (== b 2) (== c 3))
                  (&? (== a 4) (== b 5) (== c 6))
                  (&? (== a 7) (== b 8) (== c 9)))))))
)
