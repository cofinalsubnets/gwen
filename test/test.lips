(: (te x)(L '? x (L . ''ok (L '` x)) (L ', (L . ''no (L'` x)) (L fail)))
 (::: T te test (\ n ts . (X ', (X (L . ''===(L '` n)) (map ts te))))))

(test special-forms
 (nilp (,))
 (nilp (:))
 (nilp (?))
 (nilp ((\)))
 (nilp (`))
 (= 1 (, 1))
 (= + (: +))
 (= 1 (? 1))
 (= 1 ((\ 1)))
 (= 1 '1)
 (= 3 (, 1 2 3))
 (= 3 (: a 1 b 2 (+ a b)))
 (= 1 ((\ x x) 1))
 (= -5 ((\ f x (f x)) - 5))
 (= (L 1 2 3) ((\ x xs . (X x xs)) 1 2 3))
 (nilp (? () 1))
 (= 2 (? 1 2))
 (= 1 (? 0 1 2))
 (= 2 (? () 1 2))
 (= 4 (? () 1 () 2 () 3 4)))


 (: (de-str s) (: (loop s n)
                   (? (= n (slen s)) ()
                    (X (sget s n) (loop s (+ n 1))))
                (loop s 0)))
(test strings
 (= "hollow world" (scat "hol" "low " "wor" "ld"))
 (= "bidden" (ssub "forbidden planet" 3 9))
 (= "a" (str 97))
 (nilp (= "xxx" "yyy"))
  (= "asdf" (ap str (de-str "asdf"))))

(test continuations
 (= 1 (ccc (\ k (, (k 1) 2)))))
(test prelude
 (: (even x) (? (= 0 (& x 1)))
  (part '(0 1 2 3 4 5) even '((0 2 4) 1 3 5))))

  (: (fib n) ;; double recursive fibonacci function
      (? (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))
     (ack m n) ;; ackermann function
      (? (< m 1) (+ n 1)
       (ack (- m 1) (? (> n 0) (ack m (- n 1)) 1))))

(test recursion
   (= 2178309 (fib 32))

   (= 4093 (ack 3 9)))

(: quine ((\ x ((ev x) x)) '(\ i(L i(L'` i))))
 (T (= quine (ev quine))))
