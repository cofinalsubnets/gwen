(::: T (\ x (L '? x (L . (L '` x)) (L fail))))

(: Q '(\ i(L i(L '` i)))
 (T (= ((ev Q) Q) ((\ i ((ev i) i)) Q))))

(T (nilp (,)))
(T (nilp (:)))
(T (nilp (?)))
(T (nilp ((\))))
(T (nilp (`)))

(T (= 1 (, 1)))
(T (= + (: +)))
(T (= 1 (? 1)))
(T (= 1 ((\ 1))))
(T (= 1 '1))
(T (= 3 (, 1 2 3)))
(T (= 3 (: a 1 b 2 (+ a b))))
(T (= 1 ((\ x x) 1)))
(T (= -5 ((\ f x (f x)) - 5)))
(T (= (L 1 2 3) ((\ x xs . (X x xs)) 1 2 3)))
(T (nilp (? () 1)))
(T (= 2 (? 1 2)))
(T (= 1 (? 0 1 2)))
(T (= 2 (? () 1 2)))
(T (= 4 (? () 1 () 2 () 3 4)))

(: de-str (\ s
    (: de-str.l (\ s n
        (? (= n (slen s)) ()
           (X (sget s n) (de-str.l s (+ n 1)))))
     (de-str.l s 0))))

(T (= "hollow world" (scat "hol" "low " "wor" "ld")))
(T (= "bidden" (ssub "forbidden planet" 3 9)))
(T (= "a" (str 97)))
(T (nilp (= "xxx" "yyy")))
(T (= "asdf" (ap str (de-str "asdf"))))

(T (= 1 (ccc (\ k (, (k 1) 2)))))


(: fib (\ n ;; double recursive fibonacci function
     (? (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2)))))
    ack (\ m n ;; ackermann function
     (? (< m 1) (+ n 1)
      (ack (- m 1) (? (> n 0) (ack m (- n 1)) 1))))
  (, ;(T (= 2178309 (fib 32)))
     ;(T (= 4093 (ack 3 9)))
     ))
