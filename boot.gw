; this expression evaluates to a function of a list (command line arguments)
(: # prelude definitions
 prel '( ; a list of expressions to be evaluated in order
  (: true -1 false 0 not nilp
     (atomp x) (nilp (twop x))
     (!= a b) (? (= a b) 0 -1)
     (AA x) (A (A x)) (AB x) (A (B x))
     (BA x) (B (A x)) (BB x) (B (B x))
     inc (+ 1) dec (+ -1) :: (tset macros)
     (id x) x (const x y) x (co f g x) (f (g x))
     (flip f x y) (f y x) (diag f x) (f x x)
     (map f l) (? (twop l) (X (f (A l)) (map f (B l))))
     (foldl z f l) (? (twop l) (foldl (f z (A l)) f (B l)) z)
     (foldr z f l) (? (twop l) (f (A l) (foldr z f (B l))) z)
     (foldl1 f l) (foldl (A l) f (B l))
     (foldr1 f l) (foldr (last l) f (init l))
     (filter p l) (? (twop l) (: m (filter p (B l)) (? (p (A l)) (X (A l) m) m)))
     (init l) (? (B l) (X (A l) (init (B l))))
     (last l) (? (B l) (last (B l)) (A l))
     (each l f) (? (twop l) (, (f (A l)) (each (B l) f)))
     (ldel x l) (? (twop l) (? (= (A l) x) (B l) (X (A l) (ldel x (B l)))))
     (all f l) (? (twop l) (? (f (A l)) (all f (B l))) -1)
     (any f l) (? (twop l) (? (f (A l)) -1 (any f (B l))))
     (cat a b) (foldr b X a)
     (assq x l) (? l (? (= x (A (A l))) (A l) (assq x (B l))))
     (lidx x) ((: (f n l) (? (twop l) (? (= x (A l)) n (f (+ 1 n) (B l))) -1)) 0)
     (memq x) (any (= x))
     (zip a b) (? (twop a) (? (twop b) (X (X (A a) (A b)) (zip (B a) (B b)))))
     rev (foldl 0 (flip X))
     (drop n l) (? n (drop (- n 1) (B l)) l)
     (take n l) (? n (X (A l) (take (- n 1) (B l))))
     (part p) (foldr '(0) (\ a m
      (? (p a) (X (X a (A m)) (B m))
               (X (A m) (X a (B m))))))
     (.. x) (, (. x) (putc 10) x)
     (llen l) (? (twop l) (+ 1 (llen (B l))))
     (puts s) ((: (f n l) (? (= n l) s (, (putc (sget s n)) (f (+ n 1) l)))) 0 (slen s)))

  (:: 'L (foldr 0 (\ a l (X X (X a (X l 0))))))
  (:: '&& (\ l (: (and l) (? (B l) (X '? (X (A l) (X (and (B l)) 0))) (A l)) (? l (and l) -1))))
  (:: '|| (\ l (: (or l) (? l (: y (sym 0) (L ': y (A l) (L '? y y (or (B l)))))) (or l))))
  (:: ':- (\ a (X ': (cat (B a) (X (A a) 0)))))
  (:: '>>= (\ l (X (last l) (init l))))
  (:: '|> (foldl1 (\ m f (L f m ))))
  (:: '>=> (\ g (: y (sym 0) (L '\ y (foldl y (\ x f (L f x)) g)))))
  (:: '<=< (\ g (: y (sym 0) (L '\ y (foldr y (\ f x (L f x)) g)))))) ; end prelude

# eval function
  ; a single expression whose value is the eval function.
  ; you can use prelude definitions in here.
  evalr '(:- eval
    (em1 i k n) (p1 i (k (+ 1 n)))
    (em2 i x k n) (p1 i (p1 x (k (+ 2 n))))
    imm (em2 i_imm) p0 poke
    (p1 x k) (poke x (seek -1 k))
    (eval x) (: c (scop 0 (L 0) 0) (ana c x (thd0 c) 0 0))
;; functions for working with variable scope records
    (toplp c) (nilp (parof c)) (parof c) (tget 0 c 'par)
    (stkof c) (tget 0 c 'stk)  (argof c) (tget 0 c 'arg)
    (impof c) (tget 0 c 'imp)  (lamof c) (tget 0 c 'lam)
    (arity c) (+ (llen (argof c)) (llen (impof c)))
    (cpush c k v) (, (tset c k (X v (tget 0 c k))) v)
    (cpop c k) (: s (tget 0 c k) _ (tset c k (B s)) (A s))
    (cpeek c k) (A (tget 0 c k))
    (scop par arg imp) (:
     t (tnew 0)
     _ (tset t 'par par)
     _ (tset t 'arg arg)
     _ (tset t 'imp imp)
     t)
;; thread initializer
    (thd0 c n) (p1 i_ret (p0 (arity c) (seek (+ 1 n) (thd (+ 2 n)))))
;; import a variable into this scope
    (import c v) (? (not (toplp c)) (cpush c 'imp v))

    (em_ap k n) (:
     j (k (+ 1 n))
     (? (= (peek j) i_ret) (p0 i_tap j)
                           (p1 i_ap j)))
    (em_apn n k m) (:
     j (k (+ 2 m))
     (? (= (peek j) i_ret) (p1 i_tapn (p0 n j))
                           (p1 i_apn (p1 n j))))
    (stkidx d x)
      (: imp (impof d)
         i (lidx x imp)
       (? (>= i 0) i
        (: i (lidx x (argof d))
         (? (< i 0) i (+ (llen imp) i)))))

    (ana c x)
     (? (symp x)  (ana_sym c x)
        (atomp x) (imm x)
        (: a (A x) b (B x) (?
         (= a '` ) (imm (A b))
         (= a '? ) (ana_if  c b)
         (= a '\ ) (ana_lam c b)
         (= a ': ) (ana_let c b)
         (= a ', ) (ana_seq c b)
         (atomp b) (ana c a)
         (: m (tget 0 macros a) (? m
          (ana c (m b))
          (ana_ap c a b))))))

    ;ana_if is a bit complicated
    (ana_if c b) (:-
     (: a0 (pop 'end)
        a1 (ana_if_r b)
        a2 (push 'end)
      (>=> a2 a1 a0))
     ; where
     (pop y k n) (: j (k n) (, (cpop c y) j))
     (push y k n) (cpush c y (k n))
     (ana_if_r b) (?
      (atomp b) (imm 0)
      (atomp (B b))
       (: a0 (ana c (A b))
          a1 (peek_end c)
        (>=> a1 a0))
      (: a0 (ana c (A b))
         a1 (pop_alt c)
         a2 (ana c (AB b))
         a3 (peek_end c)
         a4 (push 'alt)
         a5 (ana_if_r (BB b))
       (>=> a5 a4 a3 a2 a1 a0)))

     (pop_alt c k n) (:
      j (k (+ 2 n))
      alt (cpop c 'alt)
      (p1 i_cond (p1 alt j)))

     (peek_end c k n) (:
      j (k (+ 3 n))
      a (cpeek c 'end)
      i (peek a)
      (?  (|| (= i i_ret) (= i i_tap))
           (p1 i (p1 (peek (seek 1 a)) j))
          (= i i_tapn)
           (p1 i (p1 (peek (seek 1 a)) (p1 (peek (seek 2 a)) j)))
          (p1 i_jump (p1 a j)))))

    (ana_apl n c b) (:
     (loop c b)
      (? (atomp b) id
       (: a0 (ana c (A b))
          a1 em_ap
          a2 (loop c (B b))
        (>=> a2 a1 a0)))
     _ (cpush c 'stk n)
     a (loop c b)
     _ (cpop c 'stk)
     a)

    (ana_ap c f b) (: a0 (ana c f)
                      a1 (ana_apl 0 c b)
                    (>=> a1 a0))
    ; ana_seq is recursive but pretty simple
    (ana_seq c x)
     (? (atomp x) (imm 0)
      (co (ana c (A x))
          (? (atomp (B x)) id
           (co (em1 i_drop1)
               (ana_seq c (B x))))))

   (ana_sym c x) (:- (ana_sym_r c)
    (ana_sym_r d)
     (? (nilp d) ; outside all lexical scopes?
         (: a0 (sym 0)
            y (tget a0 globals x) ; check global scope
          (? (!= y a0) (imm y) ; if it's there use that
           (, (import c x) ; if it's not there... do something
              (em2 i_free_variable x))))
       ; else...
      (: (cata_var c) (:
          i (llen (stkof c))
          (\ j m (:
           k (j (+ 2 m))
           i (+ i (stkidx c x))
           (p1 i_ref (p1 i k)))))
         lam (lamof d)
         stk (stkof d)
         lfd (assq x lam)
       (? lfd ; local function def?
            (: a1 (em2 i_late_bind lfd)
               a2 (ana_apl 0 c (BB lfd))
             (>=> a2 a1))
         (memq x stk) ; is it bound on a let stack in this scope?
          (? (= c d) (em2 i_ref (lidx x stk))
                     (, (import c x)
                        (cata_var c)))
        (<= 0 (stkidx d x)) ; is it bound as a closure or argument variable?
         (, (? (!= c d) (import c x))
            (cata_var c))
        ; else recur
        (ana_sym_r (parof d))))))


    (ana_ll c imp exp) (:
     arg (init exp)
     x (last exp)
     d (scop c arg imp)
     k (ana d x (thd0 d))
     ar (arity d)
     k (trim ((? (> ar 1) (em2 i_curry ar) id) k 0))
     imp (impof d)
     (X k imp))

    (ana_lam c b) (? (atomp b)     (imm 0)
                     (atomp (B b)) (ana c (A b))
                     (ana c (ana_ll c 0 b)))

    ; ana_let is the worst :(
    (ana_let c b) (?
     (atomp b)     (imm 0)
     (atomp (B b)) (ana c (A b))
     (:- (l1 0 0 (A b) (AB b) (BB b))
        q (scop c (argof c) (impof c))
     ;; l1 pass nom def and value expressions to l2
     ; l1 collects bindings and passes them with the body expression to l2
     (l1 noms defs nom def rest) (:
      nd (desug nom def)
      nom (A nd)
      def (B nd)
      noms (X nom noms)
      defs (X def defs)
      (? (atomp rest)     (l2 noms defs nom      1)
         (atomp (B rest)) (l2 noms defs (A rest) 0)
         (l1 noms defs (A rest) (AB rest) (BB rest))))
     ;; l2 find closures and revise lambda defs then emit eval/apply
     ; l2 finds closures for all local functions and passes a lambda expression for the body to l3
     (l2 noms defs exp even) (:

      lams (:- (cl 0 l l l)

       l (>>= 0 noms defs (: (ll a n d) (?
          (atomp n) a
          (nilp (lambp (A d))) (ll a (B n) (B d))
          (: k (A n)
             v (ana_ll q 0 (BA d)) ; first pass ..
             a (X (X k v) a)
           (ll a (B n) (B d))))))
       (cl n l l1 l2) (?
        (&& l1 l2 (!= l1 l2) (memq (AA l1) (BB (A l2))))
         (>>= n (BB (A l1)) (: (ll n v)
          (? (nilp v) (cl n l l1 (B l2))
           (: var (A v)
              vars (B (BA l2))
              n (? (memq var vars) n
                 (, (set_cdr (BA l2) (X var vars))
                    (+ 1 n)))
              (ll n (B v))))))
        l2 (cl n l l1 (B l2))
        l1 (cl n l (B l1) l)
        n (cl 0 l l l)
        l))


      lnoms (map A lams)
      (ldd ll) (X (A ll) (X (AB ll) (foldl (BB ll) (flip ldel) lnoms)))
      clams (map ldd lams)
      llam (X '\ (cat noms (L exp)))
      _ (tset q 'lam clams)
      (lls n nds) (, (cpush c 'stk n)
                     (ll nds))
      (ll nds) (? (nilp nds) id
       (: nd (A nds)
          n (A nd)
          d (B nd)
          d (? (lambp d) (: qa (assq n clams)
                            x (ana_ll q (BB qa) (B d))
                            (set_cdr qa x))
                         d)
          a1 (ana c d)
          a2 (? (&& (toplp c) even) (em2 i_defglob n) id)
          a3 (lls n (B nds))
          (>=> a3 a2 a1)))
      s0 (stkof c)
      n  (llen noms)
      a1 (ana c llam)
      a2 (lls -1 (zip (rev noms) (rev defs)))
      a3 (? (> n 1) (em_apn n) em_ap)
      _ (tset c 'stk s0)
      (>=> a3 a2 a1))))

    (set_cdr p x) (, (poke x (seek 3 p)) x) ; :[ weh
    (lambp x) (? (twop x) (= '\ (A x)))
    (desug n d) (? (atomp n) (X n d)
                   (desug (A n) (X '\ (cat (B n) (L d))))))
# run time...
; can't use prelude yet directly here
 (go e a) (? a (, (e (A a)) (go e (B a)))) ; for evaluating the prelude
 t0 (clock 0)
 e0 ev             ; initial eval
 _ (go e0 prel) ; initial prelude
 e1 (e0 evalr) ; middle eval
 _ (go e1 prel) ; final prelude
 e2 (e1 evalr) ; final eval
 t1 (clock 0)
 _ (tset globals 'boot_ms (- t1 t0))
 _ (tset globals 'ev e2) ; redefine eval
 ; now use final eval on an expression for the main function
 (e2 '(, ; can use prelude in here
  ; delete internal stuff from global namespace
  (: i (filter (\ y (= "i_" (ssub (nom y) 0 2))) (tkeys globals))
     p '(macros peek poke seek trim thd globals)
   (each (cat i p) (tdel 0 globals)))
  ev)))
