(:
 (id x) x
 (const x y) x
 (flip f x y) (f y x)
 (map f l) (? l (X (f (A l)) (map f (B l))))
 (foldl f z l) (? l (foldl f (f z (A l)) (B l)) z)
 (foldr f z l) (? l (f (A l) (foldr f z (B l))) z)
 (filter f l) (? l (: m (filter f (B l)) (? (f (A l)) (X (A l) m) m)))
 (init l) (? (B l) (X (A l) (init (B l))))
 (last l) (? (B l) (last (B l)) (A l))
 (llen l) (? (X? l) (+ 1 (llen (B l))))
 (diag f x) (f x x))
(: reverse (foldl (flip X) 0))
(: (puts s) (: (f n l) (? (= n l) s (, (putc (sget s n)) (f (+ n 1) l))) (f 0 (slen s))))
(:: 'L (foldr (\ a l (X X (X a (X l 0)))) 0))
(: (each f l) (? (X? l) (, (f (A l)) (each f (B l)))))
